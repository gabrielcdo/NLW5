{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gabriel/Documentos/codigos/Cursos-React/web/src/pages/episodes/[slug].tsx\";\nimport { format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { api } from '../../services/api';\nimport { convertDurationToTimeString } from '../../utilis/convertDurationToTimeString';\nexport default function Episode({\n  episode\n}) {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\nexport const getStaticPaths = async () => {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n};\nexport const getStaticProps = async ctx => {\n  const {\n    slug\n  } = ctx.params;\n  const {\n    data\n  } = await api.get(`/episodes/${slug}`);\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), 'd MMM yy', {\n      locale: ptBR\n    }),\n    duration: Number(data.file.duration),\n    durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n    description: data.description,\n    url: data.file.url\n  };\n  return {\n    props: {\n      episode\n    },\n    revalidade: 60 * 60 * 24 // 24 hours\n\n  };\n};","map":{"version":3,"sources":["/home/gabriel/Documentos/codigos/Cursos-React/web/src/pages/episodes/[slug].tsx"],"names":["format","parseISO","ptBR","api","convertDurationToTimeString","Episode","episode","getStaticPaths","paths","fallback","getStaticProps","ctx","slug","params","data","get","id","title","thumbnail","members","publishedAt","published_at","locale","duration","Number","file","durationAsString","description","url","props","revalidade"],"mappings":";;AAAA,SAASA,MAAT,EAAkBC,QAAlB,QAAkC,UAAlC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AAGA,SAAQC,GAAR,QAAmB,oBAAnB;AACA,SAASC,2BAAT,QAA4C,0CAA5C;AAgBA,eAAe,SAASC,OAAT,CAAiB;AAACC,EAAAA;AAAD,CAAjB,EAAwC;AAEnD,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;AACD,OAAO,MAAMC,cAA8B,GAAG,YAC9C;AACI,SAAO;AACHC,IAAAA,KAAK,EAAE,EADJ;AAEHC,IAAAA,QAAQ,EAAC;AAFN,GAAP;AAIH,CANM;AAOP,OAAO,MAAMC,cAA8B,GAAG,MAAOC,GAAP,IAAa;AACvD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,GAAG,CAACE,MAArB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMX,GAAG,CAACY,GAAJ,CAAS,aAAYH,IAAK,EAA1B,CAAvB;AACA,QAAMN,OAAO,GAAG;AACZU,IAAAA,EAAE,EAAEF,IAAI,CAACE,EADG;AAEdC,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAFE;AAGdC,IAAAA,SAAS,EAAEJ,IAAI,CAACI,SAHF;AAIdC,IAAAA,OAAO,EAAEL,IAAI,CAACK,OAJA;AAKdC,IAAAA,WAAW,EAAEpB,MAAM,CAACC,QAAQ,CAACa,IAAI,CAACO,YAAN,CAAT,EAA8B,UAA9B,EAA0C;AAAEC,MAAAA,MAAM,EAAEpB;AAAV,KAA1C,CALL;AAMdqB,IAAAA,QAAQ,EAAEC,MAAM,CAACV,IAAI,CAACW,IAAL,CAAUF,QAAX,CANF;AAOdG,IAAAA,gBAAgB,EAAEtB,2BAA2B,CAACoB,MAAM,CAACV,IAAI,CAACW,IAAL,CAAUF,QAAX,CAAP,CAP/B;AAQdI,IAAAA,WAAW,EAAEb,IAAI,CAACa,WARJ;AASdC,IAAAA,GAAG,EAAEd,IAAI,CAACW,IAAL,CAAUG;AATD,GAAhB;AAWA,SAAM;AACFC,IAAAA,KAAK,EAAC;AACFvB,MAAAA;AADE,KADJ;AAKFwB,IAAAA,UAAU,EAAE,KAAK,EAAL,GAAU,EALpB,CAKwB;;AALxB,GAAN;AAQH,CAtBM","sourcesContent":["import { format , parseISO } from 'date-fns'\nimport ptBR from 'date-fns/locale/pt-BR'\nimport { useRouter } from 'next/router'\nimport { GetStaticPaths, GetStaticProps } from 'next'\nimport {api } from '../../services/api'\nimport { convertDurationToTimeString } from '../../utilis/convertDurationToTimeString'\n\ntype Episode = {\n    id: string;\n    title: string;\n    thumbnail: string;\n    description: string;\n    members: string;\n    duration: number;\n    durationAsString: string;\n    url: string;\n    publishedAt: string;\n}\ntype EpisodeProps = {\n    episode:Episode;\n}\nexport default function Episode({episode}:EpisodeProps){\n    \n    return(\n        <h1>{}</h1>\n    )\n}\nexport const getStaticPaths: GetStaticPaths = async () =>\n{\n    return {\n        paths: [],\n        fallback:'blocking'\n    }\n}\nexport const getStaticProps: GetStaticProps = async (ctx)=>{\n    const { slug } = ctx.params\n    const { data } = await api.get(`/episodes/${slug}`)\n    const episode = {\n        id: data.id,\n      title: data.title,\n      thumbnail: data.thumbnail,\n      members: data.members,\n      publishedAt: format(parseISO(data.published_at), 'd MMM yy', { locale: ptBR }),\n      duration: Number(data.file.duration),\n      durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n      description: data.description,\n      url: data.file.url,\n    }\n    return{\n        props:{\n            episode,\n\n        },\n        revalidade: 60 * 60 * 24, // 24 hours\n\n    }\n}"]},"metadata":{},"sourceType":"module"}